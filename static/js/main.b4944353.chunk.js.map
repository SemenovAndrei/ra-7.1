{"version":3,"sources":["components/DateTime/DateTime.jsx","components/DateTimePretty/DateTimePretty.jsx","components/Video/Video.jsx","components/VideoList/VideoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["DateTime","props","className","date","DateTimePretty","WithPretty","Component","console","log","moment","fromNow","Video","title","src","url","frameborder","allow","allowfullscreen","VideoList","list","map","item","App","useState","subtract","format","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAWeA,MARf,SAAkBC,GAChB,OAAO,mBAAGC,UAAU,OAAb,SAAqBD,EAAME,Q,6BCgBrBC,ICfTC,EDAN,SAAwBC,GAQtB,OAPA,SAAqBL,GACnBM,QAAQC,IAAIP,GAEZ,IAAME,EAAOM,IAAOR,EAAME,KAAM,gBAAgBO,UAEhD,OAAO,cAACJ,EAAD,2BAAeL,GAAf,IAAsBE,KAAMA,MCNpBC,CAAeJ,GAsBnBW,MApBf,SAAeV,GACb,OACE,sBAAKC,UAAU,QAAf,UACE,wBACEU,MAAM,yBACNC,IAAKZ,EAAMa,IACXC,YAAY,IACZC,MAAM,4BACNC,iBAAe,IAEjB,cAACZ,EAAD,CAAYF,KAAMF,EAAME,WCAfe,MAbf,SAAmBjB,GACjB,OAAOA,EAAMkB,KAAKC,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,CAAOP,IAAKO,EAAKP,IAAKX,KAAMkB,EAAKlB,WC0CpDmB,MA1Cf,WAAe,MAEWC,mBAAS,CAC/B,CACET,IACE,gFACFX,KAAMM,MAASe,SAAS,GAAI,WAAWC,OAAO,wBAEhD,CACEX,IACE,gFACFX,KAAMM,MAASe,SAAS,EAAG,SAASC,OAAO,wBAE7C,CACEX,IACE,gFACFX,KAAMM,MAASe,SAAS,EAAG,OAAOC,OAAO,wBAE3C,CACEX,IACE,gFACFX,KAAM,uBAER,CACEW,IACE,gFACFX,KAAM,uBAER,CACEW,IACE,gFACFX,KAAM,yBA/BG,mBAENgB,EAFM,KAmCb,OAnCa,KAoCX,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,CAAWiB,KAAMA,OC9BRO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b4944353.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction DateTime(props) {\n  return <p className=\"date\">{props.date}</p>\n}\n\nDateTime.propTypes = {\n  date: PropTypes.string.isRequired,\n}\n\nexport default DateTime\n","import React from 'react'\nimport moment from 'moment'\nimport 'moment/locale/ru'\nimport PropTypes from 'prop-types'\n\nfunction DateTimePretty(Component) {\n  function NewDateTime(props) {\n    console.log(props)\n\n    const date = moment(props.date, 'YYYYMMDDhhmm').fromNow()\n\n    return <Component {...props} date={date} />\n  }\n  return NewDateTime\n}\n\nDateTimePretty.propTypes = {\n  date: PropTypes.string,\n}\n\nexport default DateTimePretty\n","import React from 'react'\nimport DateTime from '../DateTime/DateTime'\nimport PropTypes from 'prop-types'\nimport DateTimePretty from '../DateTimePretty/DateTimePretty'\n\nconst WithPretty = DateTimePretty(DateTime)\n\nfunction Video(props) {\n  return (\n    <div className=\"video\">\n      <iframe\n        title=\"This is a unique title\"\n        src={props.url}\n        frameborder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowfullscreen\n      ></iframe>\n      <WithPretty date={props.date} />\n    </div>\n  )\n}\n\nVideo.propTypes = {\n  url: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n}\n\nexport default Video\n","import React from 'react'\nimport Video from '../Video/Video'\nimport PropTypes from 'prop-types'\n\nfunction VideoList(props) {\n  return props.list.map((item) => <Video url={item.url} date={item.date} />)\n}\n\nVideoList.propTypes = {\n  list: PropTypes.arrayOf(\n    PropTypes.shape({\n      url: PropTypes.string.isRequired,\n      date: PropTypes.string.isRequired,\n    })\n  ),\n}\n\nexport default VideoList\n","import './App.css'\nimport { useState } from 'react'\nimport VideoList from './components/VideoList/VideoList'\nimport moment from 'moment'\n\nfunction App() {\n  // eslint-disable-next-line no-unused-vars\n  const [list, setList] = useState([\n    {\n      url:\n        'https://www.youtube.com/embed/rN6nlNC9WQA?rel=0&amp;controls=0&amp;showinfo=0',\n      date: moment().subtract(10, 'minutes').format('YYYY-MM-DD hh:mm:ss'),\n    },\n    {\n      url:\n        'https://www.youtube.com/embed/dVkK36KOcqs?rel=0&amp;controls=0&amp;showinfo=0',\n      date: moment().subtract(1, 'hours').format('YYYY-MM-DD hh:mm:ss'),\n    },\n    {\n      url:\n        'https://www.youtube.com/embed/xGRjCa49C6U?rel=0&amp;controls=0&amp;showinfo=0',\n      date: moment().subtract(1, 'day').format('YYYY-MM-DD hh:mm:ss'),\n    },\n    {\n      url:\n        'https://www.youtube.com/embed/RK1K2bCg4J8?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '2020-11-03 12:10:00',\n    },\n    {\n      url:\n        'https://www.youtube.com/embed/TKmGU77INaM?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '2018-01-01 16:17:00',\n    },\n    {\n      url:\n        'https://www.youtube.com/embed/TxbE79-1OSI?rel=0&amp;controls=0&amp;showinfo=0',\n      date: '1982-12-02 05:24:00',\n    },\n  ])\n\n  return (\n    <div className=\"App\">\n      <VideoList list={list} />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}